Rename Hostname:

sudo hostnamectl set-hostname master

Ports for the Control-plane (Master) Node(s)

1. TCP 6443      → For Kubernetes API server
2. TCP 2379–2380 → For etcd server client API
3. TCP 10250     → For Kubelet API
4. TCP 10259     → For kube-scheduler
5. TCP 10257     → For kube-controller-manager
6. TCP 22        → For remote access with ssh
7. UDP 8472      → Cluster-Wide Network Comm. — Flannel VXLAN


Ports for the Worker Node(s)

1. TCP 10250       → For Kubelet API
2. TCP 30000–32767 → NodePort Services†
3. TCP 22          → For remote access with ssh
4. UDP 8472        → Cluster-Wide Network Comm. — Flannel VXLAN

===============================================================================================================


sudo hostnamectl set-hostname master


apt-get update
apt-get install -y apt-transport-https ca-certificates curl

# Download the Google Cloud public signing key:

curl -fsSL https://dl.k8s.io/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

# Add the Kubernetes apt repository:

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Update apt package index, install kubelet, kubeadm and kubectl, and pin their version:

apt-get update
apt-get install -y kubelet kubeadm kubectl

# apt-mark hold will prevent the package from being automatically upgraded or removed.

apt-mark hold kubelet kubeadm kubectl

# Enable and start kubelet service

systemctl daemon-reload
systemctl start kubelet
systemctl enable kubelet.service





sudo usermod -aG docker $USER
newgrp docker

cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

sudo hostnamectl set-hostname worker

sudo apt-get update

sudo apt-get install -y apt-transport-https gnupg2

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo “deb https://apt.kubernetes.io/ kubernetes-xenial main” | sudo tee -a /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubectl kubeadm kubelet kubernetes-cni docker.io
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker $USER
newgrp docker

cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl — system

Setting Up Master Node for Kubernetes

sudo kubeadm config images pull
echo ‘{“exec-opts”: [“native.cgroupdriver=systemd”]}’ | sudo tee /etc/docker/daemon.json
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo systemctl restart kubelet

sudo kubeadm init — apiserver-advertise-address=172.31.38.88 — pod-network-cidr=10.244.0.0/16 # Use your master node’s private IP

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml

kubectl get nodes

Adding the Worker Node to the Cluster
echo ‘{“exec-opts”: [“native.cgroupdriver=systemd”]}’ | sudo tee /etc/docker/daemon.json
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo systemctl restart kubelet

sudo kubeadm join 172.31.21.161:6443 — token 7iwh5m.v8pqnnhjl18l81xh — discovery-token-ca-cert-hash sha256:f7dc94b7d1c86d348074aadd789800268fa516ccf1d43e24d4b9202986d69064

kubectl get nodes

kubectl get nodes -o wide

kubectl run nginx-server — image=nginx — port=80
kubectl get pods -o wide
kubectl get service -o wide

kubectl delete service nginx-server
kubectl delete pods nginx-server

kubectl cordon worker
kubectl drain worker — ignore-daemonsets — delete-emptydir-data
kubectl delete node worker



==============================================================================================================================================

sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg |sudo apt-key add
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
apt-get update
apt-get install -y kubelet kubeadm kubectl kubernetes-cni


kubeadm init
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-old-manifests/kube-flannel-rbac.yml

kubeadm token create --print-join-command

kubeadm join 172.31.47.167:6443 --token as1ln2.h0omu32b5l4x6k1s --discovery-token-ca-cert-hash sha256:e9257075e40581372d5b94a6e8fe611509003e831180fcdddb5e1299e16668d8

kubectl get nodes



kubeadm join 172.31.38.88:6443 --token 12at2w.wumtdrd2h78hgbho \
        --discovery-token-ca-cert-hash sha256:9233cc17250a75ce68a355b675308f8191fd106faef3b853d36abf02dc57b5d3


kubectl version:

Display the Kubernetes client and server version information.

kubectl version

kubectl get:

Retrieve information about resources (pods, services, deployments, etc.).

kubectl get pods
kubectl get services

kubectl describe:

Show detailed information about a resource.

kubectl describe pod <pod_name>

kubectl create:

Create a resource from a file or from command-line options.

kubectl create -f <yaml_file>

kubectl apply:

Apply changes to a resource, updating it if it exists or creating it if it doesn't.

kubectl apply -f <yaml_file>

kubectl delete:

Delete a resource.

kubectl delete pod <pod_name>

kubectl exec:

Execute a command in a running container.

kubectl exec -it <pod_name> -- /bin/bash

kubectl logs:

Print the logs from a container in a pod.

kubectl logs <pod_name>

kubectl scale:

Scale the number of replicas in a deployment.

kubectl scale deployment <deployment_name> --replicas=3

kubectl rollout:

Manage rollouts of an application.

kubectl rollout status deployment/<deployment_name>
kubectl port-forward:

Forward local ports to a pod.

kubectl port-forward <pod_name> 8080:80

kubectl get events:

Display events related to the cluster.

kubectl get events

kubectl config:

Manage kubeconfig files.

kubectl config view
kubectl cluster-info:

Display cluster information.

kubectl cluster-info

kubectl apply -f -:

